= Grub2 LVM PV install =

This fork contains the code to install GRUB2 directly on a LVM "physical volume".

The main branch (master) only contains the readme and scripts, but the "real" main branch is "savannah" currently and points to upstream branch master. The branch "pvinstall" in contrast contains the changes and is rebased on top of local master to ensure that my commits are always at the top of "master". Hence savannah is just identical to upstream/master and pvinstall is rebased op top of "savannah". Hence it is just the simplest of rebase operations.

"Savannah" should always be identical to upstream so it doesn't matter how you merge them, it should always be a fast forward merge unless they remove shit remotely. In that case perhaps a forced clone might work, I don't know.

== Building ==

Building is easy peasy and although there are dedicated packages you need most, I will just say that <code>apt build-dep grub2</code> will install anything and everything on Ubuntu unless you care about hard disk space but then it will still do it. I thought most of that space requirement went in to the Qemu packages though. That's some 171MB of stuff you will not use. 

It's just that Ubuntu (Debian) contains other stuff such as the update-grub script which you could just copy, and I'm sure you could build it using their package scripts.

Ubuntu's base version of Grub2 is at least as old as January, 2014. They backport patches from upstream whenever they feel like it. The last backported patch (and also the last patch they have) is from January 20 (2016).

My current patches apply cleanly to the Ubuntu base though.

To obtain a patch of my work, you can create a diff against the "savannah" branch (the way it is now).

=== Patch of all the changes I've done ===

 git diff savannah pvinstall

But this will include any irrelevant house-keeping changes. Not that it matters.

A diff with only the most essential set of changes for the patch would have to be done against the last "housekeeping" commit from pvinstall. I just keep them in one branch although I could put the housekeeping changes in its own branch or just apply them to master. For now, I think this is cleaner.

== Obtaining ==

 git clone https://github.com/drydenp/grub2-pvinstall.git

should fetch this repo and set up the remote origin

 cd grub2-pvinstall
 git remote add upstream git://git.savannah.gnu.org/grub.git
 git fetch upstream master
 git branch -t savannah upstream/master

will set up upstream and create a local branch savannah to track it. Savannah is not stored here on Github as a consequenc.

To have convenient access to the ubuntu branch you must do:

 git symbolic-ref refs/heads/ubuntu refs/heads/pvinstall_ubuntu2.02beta2

== Maintenance ==

=== Updating local savannah ===

 git checkout savannah
 git pull

=== Rebasing changes on top of local savannah ===

 git checkout pvinstall
 git rebase savannah

=== Updating the Ubuntu branch ===

The ubuntu branch is actually named in full "pvinstall_ubuntu2.02beta2" but as you have seen I have created a local symbolic reference called "ubuntu". This also gets updated by the below script that updates the Ubuntu source.

In order to update the Ubuntu branch with my commits:

 git checkout ubuntu
 # the last commit unique to the Ubuntu tree is tagged ubuntu_ignore

 # reset previously cherry-picked commits:
 git reset --hard ubuntu_ignore 

 # copy new commits over
 git cherry-pick savannah..pvinstall

Alternatively the commit that change the .ignore file is:

 git log --oneline .gitignore | head -1 | sed "s/ .*//"
 git log --online | grep "\bIgnore$" | sed "s/ .*//"

=== Replacing the Ubuntu sources ===

You could do this by hand, but this works perfectly.

It does the following:
* fetch the latest grub2 source
* find its version number
* stash any changes in the working dir
* create a new branch for it
* empty the branch and remove all untracked files except ignored files
* move the Ubuntu sources to it
* add it with a commit message
* commit the ubuntu_ignore commit that will create a .gitignore file
* update the newly created commit to reference the tag
* move the temporary branch to a branch with the ubuntu version in it
* update the symbolic reference "ubuntu"
* remove remaining temporary files and the tmp directory

After this you will have a new "Ubuntu source" branch named after the version with the full set of files from the download as the initial commit and an ignore file as the second commit. At that point you can copy commits to it from pvinstall if that is what you were intending to do.

I do not maintain that branch that way though, so what you will see online or if you clone it will be the "bare" Ubuntu branch/repo.

 ask_for_stash() {
   local answer
   echo "You have changes in your working directory. Aborting procedure"
   echo -e "\nExecute git stash -a to stash changes. Do you want me to do it for you?"
   read -ep "stash changes [y/n]: " answer
   if [ "$answer" = "y" ]; then
     echo "Saving current branch"
     oldbranch=$( git symbolic-ref HEAD --short ) && {
       echo "Stashing changes..."
       git stash -a
     } || {
       echo "Failed to stash. Need to abort now."
       false
     }
   fi
 }
 revert_stash() {
   echo "Your old branch was stashed because the working directory was not clean." \
     "Changing back to $oldbranch now and popping changes"
   git checkout $oldbranch && { git stash pop || echo "Popping failed, take care"; } ||
     echo "Checking out failed, there should be changes in your stash"
 }
 
 tmp=$( mktemp -d ) && { 
   cd $tmp && apt source grub2 && {
     subdir=$( ls -d * --file-type | grep "/$" | sed 's@/$@@' ) &&
     version=$( echo "$subdir" | sed "s/grub2-//" | tr -d '~' ) &&
     cd - && [ -z "$( git status -s )" ] || ask_for_stash && 
       git checkout --orphan pvinstall_ubuntu${version}_temp && { 
       git rm -rf --ignore-unmatch . && git clean -df && mv $tmp/$subdir/* . &&
       git add . && git commit -m "Ubuntu sources $version" &&
       git cherry-pick ubuntu_ignore &&
       git tag -af ubuntu_ignore -m "Tag pointing to most recent Ubuntu .gitignore commit" && {
         git branch -M pvinstall_ubuntu${version}_temp pvinstall_ubuntu${version} &&
         { git symbolic-ref refs/heads/ubuntu refs/heads/pvinstall_ubuntu${version}; true; }
       } ||
       git branch -D pvinstall_ubuntu${version}_temp
       [ $oldbranch ] && revert_stash
     }  
     rm -rf $tmp/*
   }
   rmdir $tmp
 }

I just put that stashing code into its own functions for now. Without those functions it will just abort. I was actually meaning to ''reduce'' the mount of safety code, but instead I increased it :-/.
